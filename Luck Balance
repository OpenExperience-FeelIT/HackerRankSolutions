import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'luckBalance' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER k
     *  2. 2D_INTEGER_ARRAY contests
     */

    public static int luckBalance(int k, List<List<Integer>> contests) {
    // Write your code here
    int luck = 0;
    //Creating new duplicate arraylist
    List<List<Integer>> list = new ArrayList<List<Integer>>(contests);
     for(int i=0; i<list.size(); i++)
    {
        if(list.get(i).get(1) == 0)
        {
            luck += list.get(i).get(0);
            list.remove(list.get(i));
            //System.out.println("i : " + i +" k : " + k + " luck : " + luck);
        }
    }
    sortBy(list, 0);
    System.out.println(list);
    for(int i=0; i<list.size(); i++)
    {
        if(list.get(i).get(1) == 0)
        {
            luck += list.get(i).get(0);
            System.out.println("i : " + i +" k : " + k + " luck : " + luck);
        }else
        {
            if(k>0)
            {
                luck += list.get(i).get(0);
                k--;
                System.out.println("i : " + i +" k : " + k + " luck : " + luck);
            }else
            {
                luck -= list.get(i).get(0);
                System.out.println("i : " + i +" k : " + k + " luck : " + luck);
            }
        }
    }
    return luck;
    }
    public static void sortBy(List<List<Integer>> contests, int index)
    {
        Collections.sort(contests, new Comparator<List<Integer>>()
        {
           public int compare(final List<Integer> e1, final List<Integer> e2)
           {
               if(e1.get(index)>e2.get(index))
                return -1;
               else
                return 1;
           } 
        });
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int n = Integer.parseInt(firstMultipleInput[0]);

        int k = Integer.parseInt(firstMultipleInput[1]);

        List<List<Integer>> contests = new ArrayList<>();

        IntStream.range(0, n).forEach(i -> {
            try {
                contests.add(
                    Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                        .map(Integer::parseInt)
                        .collect(toList())
                );
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        int result = Result.luckBalance(k, contests);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
